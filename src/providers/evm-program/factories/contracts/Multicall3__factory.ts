/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../contracts/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611e09806100206000396000f3fe6080604052600436106100d35760003560e01c80634d2301cc1161007a5780634d2301cc1461024257806372425d9d1461027f57806382ad56cb146102aa57806386d516e8146102da578063a8b0574e14610305578063bce38bd714610330578063c3077fa914610360578063ee82ac5e14610392576100d3565b80630f28c97d146100d8578063174dea7114610103578063252dba421461013357806327e86d6e146101645780633408e4701461018f578063399542e9146101ba5780633e64a696146101ec57806342cbb15c14610217575b600080fd5b3480156100e457600080fd5b506100ed6103cf565b6040516100fa9190611463565b60405180910390f35b61011d600480360381019061011891906114ed565b6103ff565b60405161012a91906116e4565b60405180910390f35b61014d6004803603810190610148919061175c565b610812565b60405161015b92919061186b565b60405180910390f35b34801561017057600080fd5b50610179610b24565b60405161018691906118b4565b60405180910390f35b34801561019b57600080fd5b506101a4610b6c565b6040516101b19190611463565b60405180910390f35b6101d460048036038101906101cf91906118fb565b610b9c565b6040516101e39392919061195b565b60405180910390f35b3480156101f857600080fd5b50610201610c0e565b60405161020e9190611463565b60405180910390f35b34801561022357600080fd5b5061022c610c3e565b6040516102399190611463565b60405180910390f35b34801561024e57600080fd5b50610269600480360381019061026491906119f7565b610c6e565b6040516102769190611463565b60405180910390f35b34801561028b57600080fd5b50610294610cb7565b6040516102a19190611463565b60405180910390f35b6102c460048036038101906102bf9190611a7a565b610ce7565b6040516102d191906116e4565b60405180910390f35b3480156102e657600080fd5b506102ef610fdd565b6040516102fc9190611463565b60405180910390f35b34801561031157600080fd5b5061031a61100d565b6040516103279190611ad6565b60405180910390f35b61034a600480360381019061034591906118fb565b61103d565b60405161035791906116e4565b60405180910390f35b61037a6004803603810190610375919061175c565b6113ac565b6040516103899392919061195b565b60405180910390f35b34801561039e57600080fd5b506103b960048036038101906103b49190611b1d565b6113f8565b6040516103c691906118b4565b60405180910390f35b60006103e567f610ab221fa1e7ef60c01b61142b565b6103f967d8c74a6928f49ad460c01b61142b565b42905090565b6060610415675e37d06f0df36bd760c01b61142b565b6104296715d4c0f6349599b560c01b61142b565b61043d677a48ec3e72995b1960c01b61142b565b600061045367ca90b0e382354e3960c01b61142b565b610467672fe7012fcfe5811d60c01b61142b565b6000848490509050610483670519ce37f747e8b760c01b61142b565b8067ffffffffffffffff81111561049d5761049c611b4a565b5b6040519080825280602002602001820160405280156104d657816020015b6104c361142e565b8152602001906001900390816104bb5790505b5092506104ed676351a9b6a42b141e60c01b61142b565b610501679b7b587aa54c022660c01b61142b565b36610516678b276b9dd8ade66160c01b61142b565b61052a67d3ac8b3ff6b58ff160c01b61142b565b60005b828110156107765761054967683c6041da628d4e60c01b61142b565b61055d67da0909d702f10e3b60c01b61142b565b600085828151811061057257610571611b79565b5b6020026020010151905061059067b236a45e924841bc60c01b61142b565b8787838181106105a3576105a2611b79565b5b90506020028101906105b59190611bb7565b92506105cb67deaa9de2866eefc960c01b61142b565b6105df674d0421fa9700cb5760c01b61142b565b6000836040013590506105fc67cb4a497a8601f72860c01b61142b565b61061067ec1c1118f0dc394d60c01b61142b565b808601955061062967695bf0c959a6d08e60c01b61142b565b83600001602081019061063c91906119f7565b73ffffffffffffffffffffffffffffffffffffffff16818580606001906106639190611bdf565b604051610671929190611c81565b60006040518083038185875af1925050503d80600081146106ae576040519150601f19603f3d011682016040523d82523d6000602084013e6106b3565b606091505b508360000184602001829052821515151581525050506106dd670328192f5e5e567160c01b61142b565b8151602085013517610741577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b61075567f73df9058aefda6160c01b61142b565b61076967d408565e5c53029760c01b61142b565b826001019250505061052d565b5061078b670dd2cc0fd3ab531f60c01b61142b565b61079f67652ba198f6a04eee60c01b61142b565b6107b367d48d720e98015d5360c01b61142b565b8234146107f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ec90611cf7565b60405180910390fd5b61080967673dc284490a5a1b60c01b61142b565b50505092915050565b6000606061082a674029b454dc20a93b60c01b61142b565b61083e6746980b0f481cfc7960c01b61142b565b439150610855677b35d518e5222ed460c01b61142b565b61086967c1993e5d1b7fba3560c01b61142b565b600084849050905061088567eb5786940739f8be60c01b61142b565b8067ffffffffffffffff81111561089f5761089e611b4a565b5b6040519080825280602002602001820160405280156108d257816020015b60608152602001906001900390816108bd5790505b5091506108e96719f27a735ae1d87a60c01b61142b565b6108fd67d6efa026aba4277a60c01b61142b565b36610912670f4f9a748d607a0b60c01b61142b565b61092667e080478a453ef52b60c01b61142b565b60005b82811015610b1a5761094567834b70a3ccde9b5860c01b61142b565b61095967f0931f64706f5ccc60c01b61142b565b600061096f67713536a9b4ec7c5460c01b61142b565b87878381811061098257610981611b79565b5b90506020028101906109949190611d17565b92506109aa674ccc95638d3f78aa60c01b61142b565b8260000160208101906109bd91906119f7565b73ffffffffffffffffffffffffffffffffffffffff168380602001906109e39190611bdf565b6040516109f1929190611c81565b6000604051808303816000865af19150503d8060008114610a2e576040519150601f19603f3d011682016040523d82523d6000602084013e610a33565b606091505b50868481518110610a4757610a46611b79565b5b602002602001018190528192505050610a6a6717d083a07e554a8960c01b61142b565b610a7e671edc6142debf325860c01b61142b565b610a926728ee43bfb4a84f6360c01b61142b565b80610ad2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac990611d8b565b60405180910390fd5b610ae667af4e1ecb2e82bfc160c01b61142b565b610afa67b9ff250536bb4ce060c01b61142b565b610b0e674dccf0d9803dc8f060c01b61142b565b81600101915050610929565b5050509250929050565b6000610b3a672edceed01f19eea260c01b61142b565b610b4e670ddcf99ba94dd62160c01b61142b565b610b6267441d33423ec7b51a60c01b61142b565b6001430340905090565b6000610b82673861840c121fd59d60c01b61142b565b610b9667028ce4618c66391960c01b61142b565b46905090565b6000806060610bb567cb42c2a18409909f60c01b61142b565b610bc9675dcc8b163e8fc1fa60c01b61142b565b439250610be0677b7a224d2431efd860c01b61142b565b43409150610bf867c606a6fb85751e7b60c01b61142b565b610c0386868661103d565b905093509350939050565b6000610c246785a2f9d76dde554560c01b61142b565b610c3867435712eddf03dbc060c01b61142b565b48905090565b6000610c546740fc8912c732a0fc60c01b61142b565b610c68679d7b565d4adf1b7260c01b61142b565b43905090565b6000610c8467c0f911060e2bfddc60c01b61142b565b610c986735fc035d440f08a760c01b61142b565b8173ffffffffffffffffffffffffffffffffffffffff16319050919050565b6000610ccd6759182aaa353822ae60c01b61142b565b610ce1678646263ec7f73eca60c01b61142b565b44905090565b6060610cfd67a6bed4212433c28060c01b61142b565b610d1167090135bfe96d2d1c60c01b61142b565b610d2567bdf3b118d9c4c81d60c01b61142b565b6000838390509050610d41672db965a30d35936160c01b61142b565b8067ffffffffffffffff811115610d5b57610d5a611b4a565b5b604051908082528060200260200182016040528015610d9457816020015b610d8161142e565b815260200190600190039081610d795790505b509150610dab6763868e97b3600a5760c01b61142b565b610dbf673a5c39500c1779fa60c01b61142b565b36610dd467e403e45c06c31f3560c01b61142b565b610de867702ccb7d9f9928c360c01b61142b565b60005b82811015610fd457610e0767679faef2674333db60c01b61142b565b610e1b67d7793554efebf0fa60c01b61142b565b6000848281518110610e3057610e2f611b79565b5b60200260200101519050610e4e676ffd2182eab3167060c01b61142b565b868683818110610e6157610e60611b79565b5b9050602002810190610e739190611dab565b9250610e89677a5c0c93eacfd05560c01b61142b565b826000016020810190610e9c91906119f7565b73ffffffffffffffffffffffffffffffffffffffff16838060400190610ec29190611bdf565b604051610ed0929190611c81565b6000604051808303816000865af19150503d8060008114610f0d576040519150601f19603f3d011682016040523d82523d6000602084013e610f12565b606091505b50826000018360200182905282151515158152505050610f3c67f47237c3b0ec9f9160c01b61142b565b8051602084013517610fa0577f08c379a000000000000000000000000000000000000000000000000000000000600052602060045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b610fb4673b484eb3db8f766d60c01b61142b565b610fc8678b2edeed5f660ffd60c01b61142b565b81600101915050610deb565b50505092915050565b6000610ff367cd3eb25a8541881560c01b61142b565b611007676eea96377e8d5fc060c01b61142b565b45905090565b6000611023671fa7b699e13fcd3b60c01b61142b565b611037677864c150fcbf169960c01b61142b565b41905090565b606061105367723613eef587255860c01b61142b565b61106767add242af69b2a28160c01b61142b565b61107b674e917a77dbaea66b60c01b61142b565b600083839050905061109767d6b9e88c2bcfc7e060c01b61142b565b8067ffffffffffffffff8111156110b1576110b0611b4a565b5b6040519080825280602002602001820160405280156110ea57816020015b6110d761142e565b8152602001906001900390816110cf5790505b509150611101674b51357ffbfb991660c01b61142b565b611115676bfff5119913536a60c01b61142b565b3661112a675b3d9d2e3092449460c01b61142b565b61113e67b75c3ad28858bb7c60c01b61142b565b60005b828110156113a25761115d67b7525e2c3b625a0260c01b61142b565b6111716789de5729f806815760c01b61142b565b600084828151811061118657611185611b79565b5b602002602001015190506111a46759f5a54b6a2dbdab60c01b61142b565b8686838181106111b7576111b6611b79565b5b90506020028101906111c99190611d17565b92506111df677bf47738ffb889b060c01b61142b565b8260000160208101906111f291906119f7565b73ffffffffffffffffffffffffffffffffffffffff168380602001906112189190611bdf565b604051611226929190611c81565b6000604051808303816000865af19150503d8060008114611263576040519150601f19603f3d011682016040523d82523d6000602084013e611268565b606091505b50826000018360200182905282151515158152505050611292673821fef975c0415860c01b61142b565b6112a667b5ccad4845cdcf5060c01b61142b565b8715611359576112c0672d1b2b42dad0a78060c01b61142b565b6112d4676893eccc479791a260c01b61142b565b6112e86748cb8df9061f978960c01b61142b565b6112fc678c9148ba48fcd3cc60c01b61142b565b8060000151611340576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133790611d8b565b60405180910390fd5b61135467b04f287a09a8551b60c01b61142b565b61136e565b61136d67a8c247afa6befb2760c01b61142b565b5b611382670b147210881f7d5860c01b61142b565b611396671df0db53c959adb360c01b61142b565b81600101915050611141565b5050509392505050565b60008060606113c567ea8198c825b1d56b60c01b61142b565b6113d96735dcd823423562ca60c01b61142b565b6113e560018686610b9c565b8093508194508295505050509250925092565b600061140e6731c2467ca49a95bd60c01b61142b565b6114226791a71ab1f3077b2360c01b61142b565b81409050919050565b50565b6040518060400160405280600015158152602001606081525090565b6000819050919050565b61145d8161144a565b82525050565b60006020820190506114786000830184611454565b92915050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126114ad576114ac611488565b5b8235905067ffffffffffffffff8111156114ca576114c961148d565b5b6020830191508360208202830111156114e6576114e5611492565b5b9250929050565b600080602083850312156115045761150361147e565b5b600083013567ffffffffffffffff81111561152257611521611483565b5b61152e85828601611497565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60008115159050919050565b61157b81611566565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156115bb5780820151818401526020810190506115a0565b60008484015250505050565b6000601f19601f8301169050919050565b60006115e382611581565b6115ed818561158c565b93506115fd81856020860161159d565b611606816115c7565b840191505092915050565b60006040830160008301516116296000860182611572565b506020830151848203602086015261164182826115d8565b9150508091505092915050565b600061165a8383611611565b905092915050565b6000602082019050919050565b600061167a8261153a565b6116848185611545565b93508360208202850161169685611556565b8060005b858110156116d257848403895281516116b3858261164e565b94506116be83611662565b925060208a0199505060018101905061169a565b50829750879550505050505092915050565b600060208201905081810360008301526116fe818461166f565b905092915050565b60008083601f84011261171c5761171b611488565b5b8235905067ffffffffffffffff8111156117395761173861148d565b5b60208301915083602082028301111561175557611754611492565b5b9250929050565b600080602083850312156117735761177261147e565b5b600083013567ffffffffffffffff81111561179157611790611483565b5b61179d85828601611706565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006117e183836115d8565b905092915050565b6000602082019050919050565b6000611801826117a9565b61180b81856117b4565b93508360208202850161181d856117c5565b8060005b85811015611859578484038952815161183a85826117d5565b9450611845836117e9565b925060208a01995050600181019050611821565b50829750879550505050505092915050565b60006040820190506118806000830185611454565b818103602083015261189281846117f6565b90509392505050565b6000819050919050565b6118ae8161189b565b82525050565b60006020820190506118c960008301846118a5565b92915050565b6118d881611566565b81146118e357600080fd5b50565b6000813590506118f5816118cf565b92915050565b6000806000604084860312156119145761191361147e565b5b6000611922868287016118e6565b935050602084013567ffffffffffffffff81111561194357611942611483565b5b61194f86828701611706565b92509250509250925092565b60006060820190506119706000830186611454565b61197d60208301856118a5565b818103604083015261198f818461166f565b9050949350505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006119c482611999565b9050919050565b6119d4816119b9565b81146119df57600080fd5b50565b6000813590506119f1816119cb565b92915050565b600060208284031215611a0d57611a0c61147e565b5b6000611a1b848285016119e2565b91505092915050565b60008083601f840112611a3a57611a39611488565b5b8235905067ffffffffffffffff811115611a5757611a5661148d565b5b602083019150836020820283011115611a7357611a72611492565b5b9250929050565b60008060208385031215611a9157611a9061147e565b5b600083013567ffffffffffffffff811115611aaf57611aae611483565b5b611abb85828601611a24565b92509250509250929050565b611ad0816119b9565b82525050565b6000602082019050611aeb6000830184611ac7565b92915050565b611afa8161144a565b8114611b0557600080fd5b50565b600081359050611b1781611af1565b92915050565b600060208284031215611b3357611b3261147e565b5b6000611b4184828501611b08565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b600082356001608003833603038112611bd357611bd2611ba8565b5b80830191505092915050565b60008083356001602003843603038112611bfc57611bfb611ba8565b5b80840192508235915067ffffffffffffffff821115611c1e57611c1d611bad565b5b602083019250600182023603831315611c3a57611c39611bb2565b5b509250929050565b600081905092915050565b82818337600083830152505050565b6000611c688385611c42565b9350611c75838584611c4d565b82840190509392505050565b6000611c8e828486611c5c565b91508190509392505050565b600082825260208201905092915050565b7f4d756c746963616c6c333a2076616c7565206d69736d61746368000000000000600082015250565b6000611ce1601a83611c9a565b9150611cec82611cab565b602082019050919050565b60006020820190508181036000830152611d1081611cd4565b9050919050565b600082356001604003833603038112611d3357611d32611ba8565b5b80830191505092915050565b7f4d756c746963616c6c333a2063616c6c206661696c6564000000000000000000600082015250565b6000611d75601783611c9a565b9150611d8082611d3f565b602082019050919050565b60006020820190508181036000830152611da481611d68565b9050919050565b600082356001606003833603038112611dc757611dc6611ba8565b5b8083019150509291505056fea2646970667358221220022a087732b9cbaab9acf47151c79c7b849de0ef0e5a1e8f3890c0fcb3e049d364736f6c63430008110033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Multicall3 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Multicall3__factory {
    return super.connect(runner) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new Interface(_abi) as Multicall3Interface;
  }
  static connect(address: string, runner?: ContractRunner | null): Multicall3 {
    return new Contract(address, _abi, runner) as unknown as Multicall3;
  }
}
