/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Etherman,
  EthermanInterface,
} from "../../../contracts/Etherman.sol/Etherman";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_weth",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "WETH",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unwrapWETH",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "wrapETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000ff838038062000ff8833981810160405281019062000037919062000203565b620000576200004b620000ca60201b60201c565b620000d260201b60201c565b6200007367bec2cf154819564760c01b6200019660201b60201c565b6200008f67f1d3e24ff2e6651a60c01b6200019660201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505062000235565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001cb826200019e565b9050919050565b620001dd81620001be565b8114620001e957600080fd5b50565b600081519050620001fd81620001d2565b92915050565b6000602082840312156200021c576200021b62000199565b5b60006200022c84828501620001ec565b91505092915050565b608051610d8b6200026d6000396000818161021f015281816102c80152818161041c015281816104e501526106d60152610d8b6000f3fe6080604052600436106100595760003560e01c806329793f7d146100655780635869dba814610081578063715018a6146100aa5780638da5cb5b146100c1578063ad5c4648146100ec578063f2fde38b1461011757610060565b3661006057005b600080fd5b61007f600480360381019061007a9190610961565b610140565b005b34801561008d57600080fd5b506100a860048036038101906100a391906109df565b610375565b005b3480156100b657600080fd5b506100bf610697565b005b3480156100cd57600080fd5b506100d66106ab565b6040516100e39190610a2e565b60405180910390f35b3480156100f857600080fd5b506101016106d4565b60405161010e9190610a2e565b60405180910390f35b34801561012357600080fd5b5061013e60048036038101906101399190610a49565b6106f8565b005b61015467096d577d04b284c760c01b61077b565b61015c61077e565b61017067f8e20e5f38d1690460c01b61077b565b61018467b6fa4809cadd7b8c60c01b61077b565b610198671063ec8cb2b91f8760c01b61077b565b6101ac67213ac345d52e44fb60c01b61077b565b8034146101bc576101bb610a76565b5b6101d067764939cd1bacfb8160c01b61077b565b6101e467790338bbf072a4b160c01b61077b565b600034116101f5576101f4610a76565b5b61020967facb807bc75dd2e560c01b61077b565b61021d67bd6083e486fe9ab260c01b61077b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561028557600080fd5b505af1158015610299573d6000803e3d6000fd5b50505050506102b2679babb26462cb9bae60c01b61077b565b6102c66767f178d0cde3d06b60c01b61077b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb83836040518363ffffffff1660e01b8152600401610321929190610ab4565b6020604051808303816000875af1158015610340573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103649190610b15565b61037157610370610a76565b5b5050565b610389678587db81b061aa0960c01b61077b565b61039161077e565b6103a567b92a5f7938f6a9b860c01b61077b565b6103b967cf6b69a4fa68d54260c01b61077b565b6103cd6723009c5efe23cb5d60c01b61077b565b6103e167cb57b03d9682121160c01b61077b565b600081116103f2576103f1610a76565b5b61040667c6cf0edee8eb7c0760c01b61077b565b61041a674bc184cba49bb50f60c01b61077b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161047793929190610b42565b6020604051808303816000875af1158015610496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ba9190610b15565b506104cf67a9cfb227d5d9e2b060c01b61077b565b6104e3673519d19904b561d760c01b61077b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b815260040161053c9190610b79565b600060405180830381600087803b15801561055657600080fd5b505af115801561056a573d6000803e3d6000fd5b5050505061058267748cc25f4c213e3260c01b61077b565b61059667d85928aac99b4d5060c01b61077b565b60008273ffffffffffffffffffffffffffffffffffffffff16826040516105bc90610bc5565b60006040518083038185875af1925050503d80600081146105f9576040519150601f19603f3d011682016040523d82523d6000602084013e6105fe565b606091505b5050905061061667858864b4b32345ad60c01b61077b565b61062a670ebbc4636f2a6f6360c01b61077b565b61063e67e61bdaeb71be5fdd60c01b61077b565b8061067e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067590610c37565b60405180910390fd5b610692678b1807970d0bb30a60c01b61077b565b505050565b61069f61077e565b6106a960006107fc565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b61070061077e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361076f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076690610cc9565b60405180910390fd5b610778816107fc565b50565b50565b6107866108c0565b73ffffffffffffffffffffffffffffffffffffffff166107a46106ab565b73ffffffffffffffffffffffffffffffffffffffff16146107fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107f190610d35565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108f8826108cd565b9050919050565b610908816108ed565b811461091357600080fd5b50565b600081359050610925816108ff565b92915050565b6000819050919050565b61093e8161092b565b811461094957600080fd5b50565b60008135905061095b81610935565b92915050565b60008060408385031215610978576109776108c8565b5b600061098685828601610916565b92505060206109978582860161094c565b9150509250929050565b60006109ac826108cd565b9050919050565b6109bc816109a1565b81146109c757600080fd5b50565b6000813590506109d9816109b3565b92915050565b600080604083850312156109f6576109f56108c8565b5b6000610a04858286016109ca565b9250506020610a158582860161094c565b9150509250929050565b610a28816108ed565b82525050565b6000602082019050610a436000830184610a1f565b92915050565b600060208284031215610a5f57610a5e6108c8565b5b6000610a6d84828501610916565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b610aae8161092b565b82525050565b6000604082019050610ac96000830185610a1f565b610ad66020830184610aa5565b9392505050565b60008115159050919050565b610af281610add565b8114610afd57600080fd5b50565b600081519050610b0f81610ae9565b92915050565b600060208284031215610b2b57610b2a6108c8565b5b6000610b3984828501610b00565b91505092915050565b6000606082019050610b576000830186610a1f565b610b646020830185610a1f565b610b716040830184610aa5565b949350505050565b6000602082019050610b8e6000830184610aa5565b92915050565b600081905092915050565b50565b6000610baf600083610b94565b9150610bba82610b9f565b600082019050919050565b6000610bd082610ba2565b9150819050919050565b600082825260208201905092915050565b7f4572726f723a2063616e6e6f7420756e77726170205745544800000000000000600082015250565b6000610c21601983610bda565b9150610c2c82610beb565b602082019050919050565b60006020820190508181036000830152610c5081610c14565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610cb3602683610bda565b9150610cbe82610c57565b604082019050919050565b60006020820190508181036000830152610ce281610ca6565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610d1f602083610bda565b9150610d2a82610ce9565b602082019050919050565b60006020820190508181036000830152610d4e81610d12565b905091905056fea264697066735822122061aa913bd8ab17367ed90dccb2019214e2027df2961bdfe03c3835a4d8708f9564736f6c63430008110033";

type EthermanConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EthermanConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Etherman__factory extends ContractFactory {
  constructor(...args: EthermanConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _weth: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_weth, overrides || {});
  }
  override deploy(
    _weth: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_weth, overrides || {}) as Promise<
      Etherman & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Etherman__factory {
    return super.connect(runner) as Etherman__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthermanInterface {
    return new Interface(_abi) as EthermanInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Etherman {
    return new Contract(address, _abi, runner) as unknown as Etherman;
  }
}
